//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 5 storyboards.
  struct storyboard {
    /// Storyboard `BusinessInformation`.
    static let businessInformation = _R.storyboard.businessInformation()
    /// Storyboard `DropOff`.
    static let dropOff = _R.storyboard.dropOff()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Onboarding`.
    static let onboarding = _R.storyboard.onboarding()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "BusinessInformation", bundle: ...)`
    static func businessInformation(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.businessInformation)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "DropOff", bundle: ...)`
    static func dropOff(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.dropOff)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Onboarding", bundle: ...)`
    static func onboarding(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.onboarding)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 21 colors.
  struct color {
    /// Color `c0D279A`.
    static let c0D279A = Rswift.ColorResource(bundle: R.hostingBundle, name: "c0D279A")
    /// Color `c141414`.
    static let c141414 = Rswift.ColorResource(bundle: R.hostingBundle, name: "c141414")
    /// Color `c1B34CE`.
    static let c1B34CE = Rswift.ColorResource(bundle: R.hostingBundle, name: "c1B34CE")
    /// Color `c5B9104`.
    static let c5B9104 = Rswift.ColorResource(bundle: R.hostingBundle, name: "c5B9104")
    /// Color `c613CBB`.
    static let c613CBB = Rswift.ColorResource(bundle: R.hostingBundle, name: "c613CBB")
    /// Color `c666666`.
    static let c666666 = Rswift.ColorResource(bundle: R.hostingBundle, name: "c666666")
    /// Color `c898A8D`.
    static let c898A8D = Rswift.ColorResource(bundle: R.hostingBundle, name: "c898A8D")
    /// Color `c979797`.
    static let c979797 = Rswift.ColorResource(bundle: R.hostingBundle, name: "c979797")
    /// Color `c9B9B9B`.
    static let c9B9B9B = Rswift.ColorResource(bundle: R.hostingBundle, name: "c9B9B9B")
    /// Color `c9E9E9E`.
    static let c9E9E9E = Rswift.ColorResource(bundle: R.hostingBundle, name: "c9E9E9E")
    /// Color `cC4C4C4`.
    static let cC4C4C4 = Rswift.ColorResource(bundle: R.hostingBundle, name: "cC4C4C4")
    /// Color `cD0D0D0`.
    static let cD0D0D0 = Rswift.ColorResource(bundle: R.hostingBundle, name: "cD0D0D0")
    /// Color `cDADADA`.
    static let cDADADA = Rswift.ColorResource(bundle: R.hostingBundle, name: "cDADADA")
    /// Color `cDFDFDF`.
    static let cDFDFDF = Rswift.ColorResource(bundle: R.hostingBundle, name: "cDFDFDF")
    /// Color `cEF3434`.
    static let cEF3434 = Rswift.ColorResource(bundle: R.hostingBundle, name: "cEF3434")
    /// Color `cF2F2F2`.
    static let cF2F2F2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "cF2F2F2")
    /// Color `cF6F6F6`.
    static let cF6F6F6 = Rswift.ColorResource(bundle: R.hostingBundle, name: "cF6F6F6")
    /// Color `cFFAE13`.
    static let cFFAE13 = Rswift.ColorResource(bundle: R.hostingBundle, name: "cFFAE13")
    /// Color `componentText`.
    static let componentText = Rswift.ColorResource(bundle: R.hostingBundle, name: "componentText")
    /// Color `filterBorder`.
    static let filterBorder = Rswift.ColorResource(bundle: R.hostingBundle, name: "filterBorder")
    /// Color `headerTitle`.
    static let headerTitle = Rswift.ColorResource(bundle: R.hostingBundle, name: "headerTitle")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "c0D279A", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func c0D279A(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.c0D279A, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "c141414", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func c141414(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.c141414, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "c1B34CE", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func c1B34CE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.c1B34CE, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "c5B9104", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func c5B9104(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.c5B9104, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "c613CBB", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func c613CBB(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.c613CBB, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "c666666", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func c666666(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.c666666, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "c898A8D", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func c898A8D(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.c898A8D, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "c979797", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func c979797(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.c979797, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "c9B9B9B", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func c9B9B9B(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.c9B9B9B, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "c9E9E9E", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func c9E9E9E(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.c9E9E9E, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "cC4C4C4", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func cC4C4C4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cC4C4C4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "cD0D0D0", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func cD0D0D0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cD0D0D0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "cDADADA", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func cDADADA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cDADADA, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "cDFDFDF", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func cDFDFDF(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cDFDFDF, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "cEF3434", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func cEF3434(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cEF3434, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "cF2F2F2", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func cF2F2F2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cF2F2F2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "cF6F6F6", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func cF6F6F6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cF6F6F6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "cFFAE13", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func cFFAE13(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cFFAE13, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "componentText", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func componentText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.componentText, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "filterBorder", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func filterBorder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.filterBorder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "headerTitle", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func headerTitle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.headerTitle, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "c0D279A", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func c0D279A(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.c0D279A.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "c141414", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func c141414(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.c141414.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "c1B34CE", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func c1B34CE(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.c1B34CE.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "c5B9104", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func c5B9104(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.c5B9104.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "c613CBB", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func c613CBB(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.c613CBB.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "c666666", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func c666666(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.c666666.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "c898A8D", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func c898A8D(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.c898A8D.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "c979797", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func c979797(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.c979797.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "c9B9B9B", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func c9B9B9B(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.c9B9B9B.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "c9E9E9E", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func c9E9E9E(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.c9E9E9E.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "cC4C4C4", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func cC4C4C4(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.cC4C4C4.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "cD0D0D0", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func cD0D0D0(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.cD0D0D0.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "cDADADA", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func cDADADA(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.cDADADA.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "cDFDFDF", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func cDFDFDF(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.cDFDFDF.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "cEF3434", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func cEF3434(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.cEF3434.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "cF2F2F2", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func cF2F2F2(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.cF2F2F2.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "cF6F6F6", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func cF6F6F6(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.cF6F6F6.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "cFFAE13", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func cFFAE13(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.cFFAE13.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "componentText", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func componentText(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.componentText.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "filterBorder", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func filterBorder(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.filterBorder.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "headerTitle", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func headerTitle(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.headerTitle.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 14 files.
  struct file {
    /// Resource file `Archivo-Bold.ttf`.
    static let archivoBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Archivo-Bold", pathExtension: "ttf")
    /// Resource file `Archivo-BoldItalic.ttf`.
    static let archivoBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Archivo-BoldItalic", pathExtension: "ttf")
    /// Resource file `Archivo-Italic.ttf`.
    static let archivoItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Archivo-Italic", pathExtension: "ttf")
    /// Resource file `Archivo-Medium.ttf`.
    static let archivoMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Archivo-Medium", pathExtension: "ttf")
    /// Resource file `Archivo-MediumItalic.ttf`.
    static let archivoMediumItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Archivo-MediumItalic", pathExtension: "ttf")
    /// Resource file `Archivo-Regular.ttf`.
    static let archivoRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Archivo-Regular", pathExtension: "ttf")
    /// Resource file `Archivo-SemiBold.ttf`.
    static let archivoSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Archivo-SemiBold", pathExtension: "ttf")
    /// Resource file `Archivo-SemiBoldItalic.ttf`.
    static let archivoSemiBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Archivo-SemiBoldItalic", pathExtension: "ttf")
    /// Resource file `Configuration.storekit`.
    static let configurationStorekit = Rswift.FileResource(bundle: R.hostingBundle, name: "Configuration", pathExtension: "storekit")
    /// Resource file `InquiryDemoVeritcal.mov`.
    static let inquiryDemoVeritcalMov = Rswift.FileResource(bundle: R.hostingBundle, name: "InquiryDemoVeritcal", pathExtension: "mov")
    /// Resource file `Poppins-Regular.ttf`.
    static let poppinsRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Regular", pathExtension: "ttf")
    /// Resource file `VehilceOnboardingTutorial.mov`.
    static let vehilceOnboardingTutorialMov = Rswift.FileResource(bundle: R.hostingBundle, name: "VehilceOnboardingTutorial", pathExtension: "mov")
    /// Resource file `notification.caf`.
    static let notificationCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "notification", pathExtension: "caf")
    /// Resource file `runSwiftlint.sh`.
    static let runSwiftlintSh = Rswift.FileResource(bundle: R.hostingBundle, name: "runSwiftlint", pathExtension: "sh")

    /// `bundle.url(forResource: "Archivo-Bold", withExtension: "ttf")`
    static func archivoBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.archivoBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Archivo-BoldItalic", withExtension: "ttf")`
    static func archivoBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.archivoBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Archivo-Italic", withExtension: "ttf")`
    static func archivoItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.archivoItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Archivo-Medium", withExtension: "ttf")`
    static func archivoMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.archivoMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Archivo-MediumItalic", withExtension: "ttf")`
    static func archivoMediumItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.archivoMediumItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Archivo-Regular", withExtension: "ttf")`
    static func archivoRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.archivoRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Archivo-SemiBold", withExtension: "ttf")`
    static func archivoSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.archivoSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Archivo-SemiBoldItalic", withExtension: "ttf")`
    static func archivoSemiBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.archivoSemiBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Configuration", withExtension: "storekit")`
    static func configurationStorekit(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.configurationStorekit
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "InquiryDemoVeritcal", withExtension: "mov")`
    static func inquiryDemoVeritcalMov(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.inquiryDemoVeritcalMov
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-Regular", withExtension: "ttf")`
    static func poppinsRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "VehilceOnboardingTutorial", withExtension: "mov")`
    static func vehilceOnboardingTutorialMov(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.vehilceOnboardingTutorialMov
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "notification", withExtension: "caf")`
    static func notificationCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.notificationCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "runSwiftlint", withExtension: "sh")`
    static func runSwiftlintSh(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.runSwiftlintSh
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 9 fonts.
  struct font: Rswift.Validatable {
    /// Font `Archivo-BoldItalic`.
    static let archivoBoldItalic = Rswift.FontResource(fontName: "Archivo-BoldItalic")
    /// Font `Archivo-Bold`.
    static let archivoBold = Rswift.FontResource(fontName: "Archivo-Bold")
    /// Font `Archivo-Italic`.
    static let archivoItalic = Rswift.FontResource(fontName: "Archivo-Italic")
    /// Font `Archivo-MediumItalic`.
    static let archivoMediumItalic = Rswift.FontResource(fontName: "Archivo-MediumItalic")
    /// Font `Archivo-Medium`.
    static let archivoMedium = Rswift.FontResource(fontName: "Archivo-Medium")
    /// Font `Archivo-Regular`.
    static let archivoRegular = Rswift.FontResource(fontName: "Archivo-Regular")
    /// Font `Archivo-SemiBoldItalic`.
    static let archivoSemiBoldItalic = Rswift.FontResource(fontName: "Archivo-SemiBoldItalic")
    /// Font `Archivo-SemiBold`.
    static let archivoSemiBold = Rswift.FontResource(fontName: "Archivo-SemiBold")
    /// Font `Poppins-Regular`.
    static let poppinsRegular = Rswift.FontResource(fontName: "Poppins-Regular")

    /// `UIFont(name: "Archivo-Bold", size: ...)`
    static func archivoBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: archivoBold, size: size)
    }

    /// `UIFont(name: "Archivo-BoldItalic", size: ...)`
    static func archivoBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: archivoBoldItalic, size: size)
    }

    /// `UIFont(name: "Archivo-Italic", size: ...)`
    static func archivoItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: archivoItalic, size: size)
    }

    /// `UIFont(name: "Archivo-Medium", size: ...)`
    static func archivoMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: archivoMedium, size: size)
    }

    /// `UIFont(name: "Archivo-MediumItalic", size: ...)`
    static func archivoMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: archivoMediumItalic, size: size)
    }

    /// `UIFont(name: "Archivo-Regular", size: ...)`
    static func archivoRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: archivoRegular, size: size)
    }

    /// `UIFont(name: "Archivo-SemiBold", size: ...)`
    static func archivoSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: archivoSemiBold, size: size)
    }

    /// `UIFont(name: "Archivo-SemiBoldItalic", size: ...)`
    static func archivoSemiBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: archivoSemiBoldItalic, size: size)
    }

    /// `UIFont(name: "Poppins-Regular", size: ...)`
    static func poppinsRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsRegular, size: size)
    }

    static func validate() throws {
      if R.font.archivoBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Archivo-Bold' could not be loaded, is 'Archivo-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.archivoBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Archivo-BoldItalic' could not be loaded, is 'Archivo-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.archivoItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Archivo-Italic' could not be loaded, is 'Archivo-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.archivoMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Archivo-Medium' could not be loaded, is 'Archivo-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.archivoMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Archivo-MediumItalic' could not be loaded, is 'Archivo-MediumItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.archivoRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Archivo-Regular' could not be loaded, is 'Archivo-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.archivoSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Archivo-SemiBold' could not be loaded, is 'Archivo-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.archivoSemiBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Archivo-SemiBoldItalic' could not be loaded, is 'Archivo-SemiBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Regular' could not be loaded, is 'Poppins-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 91 images.
  struct image {
    /// Image `Drop-Off`.
    static let dropOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "Drop-Off")
    /// Image `Inquiry`.
    static let inquiry = Rswift.ImageResource(bundle: R.hostingBundle, name: "Inquiry")
    /// Image `On-boarding`.
    static let onBoarding = Rswift.ImageResource(bundle: R.hostingBundle, name: "On-boarding")
    /// Image `accountSettingsArrow`.
    static let accountSettingsArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "accountSettingsArrow")
    /// Image `account`.
    static let account = Rswift.ImageResource(bundle: R.hostingBundle, name: "account")
    /// Image `addService`.
    static let addService = Rswift.ImageResource(bundle: R.hostingBundle, name: "addService")
    /// Image `arrow-down`.
    static let arrowDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow-down")
    /// Image `arrow-right-pointer`.
    static let arrowRightPointer = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow-right-pointer")
    /// Image `arrow-up`.
    static let arrowUp = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow-up")
    /// Image `backbutton`.
    static let backbutton = Rswift.ImageResource(bundle: R.hostingBundle, name: "backbutton")
    /// Image `barcode`.
    static let barcode = Rswift.ImageResource(bundle: R.hostingBundle, name: "barcode")
    /// Image `business-info`.
    static let businessInfo = Rswift.ImageResource(bundle: R.hostingBundle, name: "business-info")
    /// Image `calendar`.
    static let calendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "calendar")
    /// Image `carPlaceholder`.
    static let carPlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "carPlaceholder")
    /// Image `chatDelete`.
    static let chatDelete = Rswift.ImageResource(bundle: R.hostingBundle, name: "chatDelete")
    /// Image `chatImage`.
    static let chatImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "chatImage")
    /// Image `chatInvoice`.
    static let chatInvoice = Rswift.ImageResource(bundle: R.hostingBundle, name: "chatInvoice")
    /// Image `chatJobStatusIcon`.
    static let chatJobStatusIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "chatJobStatusIcon")
    /// Image `chatPayment`.
    static let chatPayment = Rswift.ImageResource(bundle: R.hostingBundle, name: "chatPayment")
    /// Image `clock`.
    static let clock = Rswift.ImageResource(bundle: R.hostingBundle, name: "clock")
    /// Image `closeIcon`.
    static let closeIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "closeIcon")
    /// Image `communication`.
    static let communication = Rswift.ImageResource(bundle: R.hostingBundle, name: "communication")
    /// Image `connectBankPopupIcon`.
    static let connectBankPopupIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "connectBankPopupIcon")
    /// Image `contactSupport`.
    static let contactSupport = Rswift.ImageResource(bundle: R.hostingBundle, name: "contactSupport")
    /// Image `content-library`.
    static let contentLibrary = Rswift.ImageResource(bundle: R.hostingBundle, name: "content-library")
    /// Image `createEstimate`.
    static let createEstimate = Rswift.ImageResource(bundle: R.hostingBundle, name: "createEstimate")
    /// Image `customers`.
    static let customers = Rswift.ImageResource(bundle: R.hostingBundle, name: "customers")
    /// Image `dropDownArrow`.
    static let dropDownArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "dropDownArrow")
    /// Image `emptyBox`.
    static let emptyBox = Rswift.ImageResource(bundle: R.hostingBundle, name: "emptyBox")
    /// Image `errorPopoverIcon`.
    static let errorPopoverIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "errorPopoverIcon")
    /// Image `green-checkmark`.
    static let greenCheckmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "green-checkmark")
    /// Image `greenCheck`.
    static let greenCheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "greenCheck")
    /// Image `hapticTouch`.
    static let hapticTouch = Rswift.ImageResource(bundle: R.hostingBundle, name: "hapticTouch")
    /// Image `headerOnboardVehicle`.
    static let headerOnboardVehicle = Rswift.ImageResource(bundle: R.hostingBundle, name: "headerOnboardVehicle")
    /// Image `headerSendForms`.
    static let headerSendForms = Rswift.ImageResource(bundle: R.hostingBundle, name: "headerSendForms")
    /// Image `home`.
    static let home = Rswift.ImageResource(bundle: R.hostingBundle, name: "home")
    /// Image `iconCalendar`.
    static let iconCalendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconCalendar")
    /// Image `iconGuidelines`.
    static let iconGuidelines = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconGuidelines")
    /// Image `iconVisibility`.
    static let iconVisibility = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconVisibility")
    /// Image `icon_settings`.
    static let icon_settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_settings")
    /// Image `info`.
    static let info = Rswift.ImageResource(bundle: R.hostingBundle, name: "info")
    /// Image `inquiriesEmpty`.
    static let inquiriesEmpty = Rswift.ImageResource(bundle: R.hostingBundle, name: "inquiriesEmpty")
    /// Image `inquiries`.
    static let inquiries = Rswift.ImageResource(bundle: R.hostingBundle, name: "inquiries")
    /// Image `inquiryPopupIcon`.
    static let inquiryPopupIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "inquiryPopupIcon")
    /// Image `jobArrow`.
    static let jobArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "jobArrow")
    /// Image `jobStatusCompleted`.
    static let jobStatusCompleted = Rswift.ImageResource(bundle: R.hostingBundle, name: "jobStatusCompleted")
    /// Image `jobStatusInProgress`.
    static let jobStatusInProgress = Rswift.ImageResource(bundle: R.hostingBundle, name: "jobStatusInProgress")
    /// Image `jobStatusInQueue`.
    static let jobStatusInQueue = Rswift.ImageResource(bundle: R.hostingBundle, name: "jobStatusInQueue")
    /// Image `jobs`.
    static let jobs = Rswift.ImageResource(bundle: R.hostingBundle, name: "jobs")
    /// Image `logout`.
    static let logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "logout")
    /// Image `motorvateLogo`.
    static let motorvateLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "motorvateLogo")
    /// Image `notificationCard`.
    static let notificationCard = Rswift.ImageResource(bundle: R.hostingBundle, name: "notificationCard")
    /// Image `notificationMessage`.
    static let notificationMessage = Rswift.ImageResource(bundle: R.hostingBundle, name: "notificationMessage")
    /// Image `notificationWhatsApp`.
    static let notificationWhatsApp = Rswift.ImageResource(bundle: R.hostingBundle, name: "notificationWhatsApp")
    /// Image `notification`.
    static let notification = Rswift.ImageResource(bundle: R.hostingBundle, name: "notification")
    /// Image `onboardVehicle`.
    static let onboardVehicle = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboardVehicle")
    /// Image `paywall-confirmation-bg`.
    static let paywallConfirmationBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "paywall-confirmation-bg")
    /// Image `playbutton`.
    static let playbutton = Rswift.ImageResource(bundle: R.hostingBundle, name: "playbutton")
    /// Image `popupArrow`.
    static let popupArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "popupArrow")
    /// Image `poweredByStripe`.
    static let poweredByStripe = Rswift.ImageResource(bundle: R.hostingBundle, name: "poweredByStripe")
    /// Image `presets`.
    static let presets = Rswift.ImageResource(bundle: R.hostingBundle, name: "presets")
    /// Image `replay`.
    static let replay = Rswift.ImageResource(bundle: R.hostingBundle, name: "replay")
    /// Image `scanGuide`.
    static let scanGuide = Rswift.ImageResource(bundle: R.hostingBundle, name: "scanGuide")
    /// Image `scanLicensePlate`.
    static let scanLicensePlate = Rswift.ImageResource(bundle: R.hostingBundle, name: "scanLicensePlate")
    /// Image `sendMessage`.
    static let sendMessage = Rswift.ImageResource(bundle: R.hostingBundle, name: "sendMessage")
    /// Image `service-options-onboard-vehicle`.
    static let serviceOptionsOnboardVehicle = Rswift.ImageResource(bundle: R.hostingBundle, name: "service-options-onboard-vehicle")
    /// Image `service-options-save-service-as-inquiry`.
    static let serviceOptionsSaveServiceAsInquiry = Rswift.ImageResource(bundle: R.hostingBundle, name: "service-options-save-service-as-inquiry")
    /// Image `service-options-schedule-service`.
    static let serviceOptionsScheduleService = Rswift.ImageResource(bundle: R.hostingBundle, name: "service-options-schedule-service")
    /// Image `service-options-send-estimate`.
    static let serviceOptionsSendEstimate = Rswift.ImageResource(bundle: R.hostingBundle, name: "service-options-send-estimate")
    /// Image `serviceDelete`.
    static let serviceDelete = Rswift.ImageResource(bundle: R.hostingBundle, name: "serviceDelete")
    /// Image `serviceEdit`.
    static let serviceEdit = Rswift.ImageResource(bundle: R.hostingBundle, name: "serviceEdit")
    /// Image `settingsAddTeamMembers`.
    static let settingsAddTeamMembers = Rswift.ImageResource(bundle: R.hostingBundle, name: "settingsAddTeamMembers")
    /// Image `settingsConnectBank`.
    static let settingsConnectBank = Rswift.ImageResource(bundle: R.hostingBundle, name: "settingsConnectBank")
    /// Image `stepFiveTop`.
    static let stepFiveTop = Rswift.ImageResource(bundle: R.hostingBundle, name: "stepFiveTop")
    /// Image `stepFourTop`.
    static let stepFourTop = Rswift.ImageResource(bundle: R.hostingBundle, name: "stepFourTop")
    /// Image `stepOneBottom`.
    static let stepOneBottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "stepOneBottom")
    /// Image `stepOneTop`.
    static let stepOneTop = Rswift.ImageResource(bundle: R.hostingBundle, name: "stepOneTop")
    /// Image `stepSixBottom`.
    static let stepSixBottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "stepSixBottom")
    /// Image `stepSixTop`.
    static let stepSixTop = Rswift.ImageResource(bundle: R.hostingBundle, name: "stepSixTop")
    /// Image `stepTwoBottom`.
    static let stepTwoBottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "stepTwoBottom")
    /// Image `stepTwoTop`.
    static let stepTwoTop = Rswift.ImageResource(bundle: R.hostingBundle, name: "stepTwoTop")
    /// Image `upcoming`.
    static let upcoming = Rswift.ImageResource(bundle: R.hostingBundle, name: "upcoming")
    /// Image `validationTick`.
    static let validationTick = Rswift.ImageResource(bundle: R.hostingBundle, name: "validationTick")
    /// Image `walkthroughArrow`.
    static let walkthroughArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "walkthroughArrow")
    /// Image `walkthroughBackArrow`.
    static let walkthroughBackArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "walkthroughBackArrow")
    /// Image `walkthroughBottomArrow`.
    static let walkthroughBottomArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "walkthroughBottomArrow")
    /// Image `walkthroughCar`.
    static let walkthroughCar = Rswift.ImageResource(bundle: R.hostingBundle, name: "walkthroughCar")
    /// Image `walkthroughFinger`.
    static let walkthroughFinger = Rswift.ImageResource(bundle: R.hostingBundle, name: "walkthroughFinger")
    /// Image `walkthroughIcon`.
    static let walkthroughIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "walkthroughIcon")
    /// Image `welcome`.
    static let welcome = Rswift.ImageResource(bundle: R.hostingBundle, name: "welcome")
    /// Image `yellowInfo`.
    static let yellowInfo = Rswift.ImageResource(bundle: R.hostingBundle, name: "yellowInfo")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Drop-Off", bundle: ..., traitCollection: ...)`
    static func dropOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dropOff, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Inquiry", bundle: ..., traitCollection: ...)`
    static func inquiry(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.inquiry, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "On-boarding", bundle: ..., traitCollection: ...)`
    static func onBoarding(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onBoarding, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "account", bundle: ..., traitCollection: ...)`
    static func account(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.account, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "accountSettingsArrow", bundle: ..., traitCollection: ...)`
    static func accountSettingsArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.accountSettingsArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "addService", bundle: ..., traitCollection: ...)`
    static func addService(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addService, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow-down", bundle: ..., traitCollection: ...)`
    static func arrowDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowDown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow-right-pointer", bundle: ..., traitCollection: ...)`
    static func arrowRightPointer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowRightPointer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow-up", bundle: ..., traitCollection: ...)`
    static func arrowUp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowUp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "backbutton", bundle: ..., traitCollection: ...)`
    static func backbutton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backbutton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "barcode", bundle: ..., traitCollection: ...)`
    static func barcode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.barcode, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "business-info", bundle: ..., traitCollection: ...)`
    static func businessInfo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.businessInfo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "calendar", bundle: ..., traitCollection: ...)`
    static func calendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calendar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "carPlaceholder", bundle: ..., traitCollection: ...)`
    static func carPlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.carPlaceholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chatDelete", bundle: ..., traitCollection: ...)`
    static func chatDelete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatDelete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chatImage", bundle: ..., traitCollection: ...)`
    static func chatImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chatInvoice", bundle: ..., traitCollection: ...)`
    static func chatInvoice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatInvoice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chatJobStatusIcon", bundle: ..., traitCollection: ...)`
    static func chatJobStatusIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatJobStatusIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chatPayment", bundle: ..., traitCollection: ...)`
    static func chatPayment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatPayment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "clock", bundle: ..., traitCollection: ...)`
    static func clock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "closeIcon", bundle: ..., traitCollection: ...)`
    static func closeIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.closeIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "communication", bundle: ..., traitCollection: ...)`
    static func communication(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.communication, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "connectBankPopupIcon", bundle: ..., traitCollection: ...)`
    static func connectBankPopupIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.connectBankPopupIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "contactSupport", bundle: ..., traitCollection: ...)`
    static func contactSupport(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.contactSupport, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "content-library", bundle: ..., traitCollection: ...)`
    static func contentLibrary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.contentLibrary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "createEstimate", bundle: ..., traitCollection: ...)`
    static func createEstimate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.createEstimate, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "customers", bundle: ..., traitCollection: ...)`
    static func customers(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.customers, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dropDownArrow", bundle: ..., traitCollection: ...)`
    static func dropDownArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dropDownArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "emptyBox", bundle: ..., traitCollection: ...)`
    static func emptyBox(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emptyBox, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "errorPopoverIcon", bundle: ..., traitCollection: ...)`
    static func errorPopoverIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.errorPopoverIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "green-checkmark", bundle: ..., traitCollection: ...)`
    static func greenCheckmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greenCheckmark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "greenCheck", bundle: ..., traitCollection: ...)`
    static func greenCheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greenCheck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hapticTouch", bundle: ..., traitCollection: ...)`
    static func hapticTouch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hapticTouch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "headerOnboardVehicle", bundle: ..., traitCollection: ...)`
    static func headerOnboardVehicle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.headerOnboardVehicle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "headerSendForms", bundle: ..., traitCollection: ...)`
    static func headerSendForms(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.headerSendForms, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home", bundle: ..., traitCollection: ...)`
    static func home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconCalendar", bundle: ..., traitCollection: ...)`
    static func iconCalendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCalendar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconGuidelines", bundle: ..., traitCollection: ...)`
    static func iconGuidelines(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconGuidelines, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconVisibility", bundle: ..., traitCollection: ...)`
    static func iconVisibility(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconVisibility, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_settings", bundle: ..., traitCollection: ...)`
    static func icon_settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_settings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "info", bundle: ..., traitCollection: ...)`
    static func info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.info, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "inquiries", bundle: ..., traitCollection: ...)`
    static func inquiries(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.inquiries, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "inquiriesEmpty", bundle: ..., traitCollection: ...)`
    static func inquiriesEmpty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.inquiriesEmpty, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "inquiryPopupIcon", bundle: ..., traitCollection: ...)`
    static func inquiryPopupIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.inquiryPopupIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "jobArrow", bundle: ..., traitCollection: ...)`
    static func jobArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.jobArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "jobStatusCompleted", bundle: ..., traitCollection: ...)`
    static func jobStatusCompleted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.jobStatusCompleted, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "jobStatusInProgress", bundle: ..., traitCollection: ...)`
    static func jobStatusInProgress(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.jobStatusInProgress, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "jobStatusInQueue", bundle: ..., traitCollection: ...)`
    static func jobStatusInQueue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.jobStatusInQueue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "jobs", bundle: ..., traitCollection: ...)`
    static func jobs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.jobs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logout", bundle: ..., traitCollection: ...)`
    static func logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "motorvateLogo", bundle: ..., traitCollection: ...)`
    static func motorvateLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.motorvateLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notification", bundle: ..., traitCollection: ...)`
    static func notification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notificationCard", bundle: ..., traitCollection: ...)`
    static func notificationCard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notificationCard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notificationMessage", bundle: ..., traitCollection: ...)`
    static func notificationMessage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notificationMessage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notificationWhatsApp", bundle: ..., traitCollection: ...)`
    static func notificationWhatsApp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notificationWhatsApp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboardVehicle", bundle: ..., traitCollection: ...)`
    static func onboardVehicle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboardVehicle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "paywall-confirmation-bg", bundle: ..., traitCollection: ...)`
    static func paywallConfirmationBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paywallConfirmationBg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "playbutton", bundle: ..., traitCollection: ...)`
    static func playbutton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.playbutton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "popupArrow", bundle: ..., traitCollection: ...)`
    static func popupArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popupArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "poweredByStripe", bundle: ..., traitCollection: ...)`
    static func poweredByStripe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.poweredByStripe, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "presets", bundle: ..., traitCollection: ...)`
    static func presets(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.presets, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "replay", bundle: ..., traitCollection: ...)`
    static func replay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.replay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "scanGuide", bundle: ..., traitCollection: ...)`
    static func scanGuide(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scanGuide, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "scanLicensePlate", bundle: ..., traitCollection: ...)`
    static func scanLicensePlate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scanLicensePlate, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sendMessage", bundle: ..., traitCollection: ...)`
    static func sendMessage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sendMessage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "service-options-onboard-vehicle", bundle: ..., traitCollection: ...)`
    static func serviceOptionsOnboardVehicle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.serviceOptionsOnboardVehicle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "service-options-save-service-as-inquiry", bundle: ..., traitCollection: ...)`
    static func serviceOptionsSaveServiceAsInquiry(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.serviceOptionsSaveServiceAsInquiry, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "service-options-schedule-service", bundle: ..., traitCollection: ...)`
    static func serviceOptionsScheduleService(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.serviceOptionsScheduleService, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "service-options-send-estimate", bundle: ..., traitCollection: ...)`
    static func serviceOptionsSendEstimate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.serviceOptionsSendEstimate, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "serviceDelete", bundle: ..., traitCollection: ...)`
    static func serviceDelete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.serviceDelete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "serviceEdit", bundle: ..., traitCollection: ...)`
    static func serviceEdit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.serviceEdit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settingsAddTeamMembers", bundle: ..., traitCollection: ...)`
    static func settingsAddTeamMembers(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsAddTeamMembers, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settingsConnectBank", bundle: ..., traitCollection: ...)`
    static func settingsConnectBank(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsConnectBank, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "stepFiveTop", bundle: ..., traitCollection: ...)`
    static func stepFiveTop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stepFiveTop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "stepFourTop", bundle: ..., traitCollection: ...)`
    static func stepFourTop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stepFourTop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "stepOneBottom", bundle: ..., traitCollection: ...)`
    static func stepOneBottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stepOneBottom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "stepOneTop", bundle: ..., traitCollection: ...)`
    static func stepOneTop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stepOneTop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "stepSixBottom", bundle: ..., traitCollection: ...)`
    static func stepSixBottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stepSixBottom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "stepSixTop", bundle: ..., traitCollection: ...)`
    static func stepSixTop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stepSixTop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "stepTwoBottom", bundle: ..., traitCollection: ...)`
    static func stepTwoBottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stepTwoBottom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "stepTwoTop", bundle: ..., traitCollection: ...)`
    static func stepTwoTop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stepTwoTop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "upcoming", bundle: ..., traitCollection: ...)`
    static func upcoming(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.upcoming, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "validationTick", bundle: ..., traitCollection: ...)`
    static func validationTick(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.validationTick, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "walkthroughArrow", bundle: ..., traitCollection: ...)`
    static func walkthroughArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walkthroughArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "walkthroughBackArrow", bundle: ..., traitCollection: ...)`
    static func walkthroughBackArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walkthroughBackArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "walkthroughBottomArrow", bundle: ..., traitCollection: ...)`
    static func walkthroughBottomArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walkthroughBottomArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "walkthroughCar", bundle: ..., traitCollection: ...)`
    static func walkthroughCar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walkthroughCar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "walkthroughFinger", bundle: ..., traitCollection: ...)`
    static func walkthroughFinger(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walkthroughFinger, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "walkthroughIcon", bundle: ..., traitCollection: ...)`
    static func walkthroughIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walkthroughIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "welcome", bundle: ..., traitCollection: ...)`
    static func welcome(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.welcome, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "yellowInfo", bundle: ..., traitCollection: ...)`
    static func yellowInfo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yellowInfo, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 6 nibs.
  struct nib {
    /// Nib `CaptureViewController`.
    static let captureViewController = _R.nib._CaptureViewController()
    /// Nib `CommunicationViewCell`.
    static let communicationViewCell = _R.nib._CommunicationViewCell()
    /// Nib `CustomerViewCell`.
    static let customerViewCell = _R.nib._CustomerViewCell()
    /// Nib `FooterView`.
    static let footerView = _R.nib._FooterView()
    /// Nib `SlideUpViewController`.
    static let slideUpViewController = _R.nib._SlideUpViewController()
    /// Nib `UpcomingCell`.
    static let upcomingCell = _R.nib._UpcomingCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CaptureViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.captureViewController) instead")
    static func captureViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.captureViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CommunicationViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.communicationViewCell) instead")
    static func communicationViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.communicationViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CustomerViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.customerViewCell) instead")
    static func customerViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.customerViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FooterView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.footerView) instead")
    static func footerView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.footerView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SlideUpViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.slideUpViewController) instead")
    static func slideUpViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.slideUpViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UpcomingCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.upcomingCell) instead")
    static func upcomingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.upcomingCell)
    }
    #endif

    static func captureViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.captureViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func communicationViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CommunicationViewCell? {
      return R.nib.communicationViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommunicationViewCell
    }

    static func customerViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CustomerViewCell? {
      return R.nib.customerViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CustomerViewCell
    }

    static func footerView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FooterView? {
      return R.nib.footerView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FooterView
    }

    static func slideUpViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SlideUpViewController? {
      return R.nib.slideUpViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SlideUpViewController
    }

    static func upcomingCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UpcomingCell? {
      return R.nib.upcomingCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UpcomingCell
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib {
    struct _CaptureViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CaptureViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _CommunicationViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CommunicationViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CommunicationViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommunicationViewCell
      }

      fileprivate init() {}
    }

    struct _CustomerViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CustomerViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CustomerViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CustomerViewCell
      }

      fileprivate init() {}
    }

    struct _FooterView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FooterView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FooterView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FooterView
      }

      fileprivate init() {}
    }

    struct _SlideUpViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SlideUpViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SlideUpViewController? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SlideUpViewController
      }

      fileprivate init() {}
    }

    struct _UpcomingCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "UpcomingCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UpcomingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UpcomingCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try businessInformation.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try dropOff.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try onboarding.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct businessInformation: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = BusinessInformationViewController

      let bundle = R.hostingBundle
      let name = "BusinessInformation"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct dropOff: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let dropOff = StoryboardViewControllerResource<UIKit.UIViewController>(identifier: "DropOff")
      let name = "DropOff"

      func dropOff(_: Void = ()) -> UIKit.UIViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dropOff)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.dropOff().dropOff() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dropOff' could not be loaded from storyboard 'DropOff' as 'UIKit.UIViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UISplitViewController

      let bundle = R.hostingBundle
      let jobsViewController = StoryboardViewControllerResource<JobsViewController>(identifier: "JobsViewController")
      let name = "Main"

      func jobsViewController(_: Void = ()) -> JobsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: jobsViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().jobsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'jobsViewController' could not be loaded from storyboard 'Main' as 'JobsViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct onboarding: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Onboarding"
      let onboarding = StoryboardViewControllerResource<UIKit.UIViewController>(identifier: "Onboarding")

      func onboarding(_: Void = ()) -> UIKit.UIViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: onboarding)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.onboarding().onboarding() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'onboarding' could not be loaded from storyboard 'Onboarding' as 'UIKit.UIViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
